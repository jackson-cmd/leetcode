###others answer

```
class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        
        n=len(nums)
        res=[]
        if(not nums or n<3):
            return []
        nums.sort()
        res=[]
        for i in range(n):
            if(nums[i]>0):
                return res
            if(i>0 and nums[i]==nums[i-1]):
                continue
            L=i+1
            R=n-1
            while(L<R):
                if(nums[i]+nums[L]+nums[R]==0):
                    res.append([nums[i],nums[L],nums[R]])
                    while(L<R and nums[L]==nums[L+1]):
                        L=L+1
                    while(L<R and nums[R]==nums[R-1]):
                        R=R-1
                    L=L+1
                    R=R-1
                elif(nums[i]+nums[L]+nums[R]>0):
                    R=R-1
                else:
                    L=L+1
        return res
```

###my solution
首先一个无序数组， 先想到排序，然后我们需要让3个数相加等于0，先考虑临界情况然后要用双指针来解决。
```
class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        nums=sorted(nums)
        ans=[]
        if nums[0]>0 or nums[-1]<0:#check the array is exist
            return []
        else:
            l=0#left right pointer
            r=len(nums)-1
            while(l<r):
                target=(-1)*(nums[l]+nums[r])
                if target in nums[l+1:r]:
                    ans+=[l,nums.index(target),r]
                elif target>nums[r-1]:
                    r-=1
                elif target<nums[l+1]:
                    l+=1
            return ans    
```
逻辑不对，一直返回空数组，需要换一种方法看看
